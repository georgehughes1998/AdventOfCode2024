from functools import reduce


class Day8ResonantCollinearity:
    def solvePart1(self, input_value: list[str]) -> int:
        return len(set(sum([sum([[(positionA[0] + (positionA[0]-positionB[0]), positionA[1] + (positionA[1]-positionB[1])) for positionB in reduce(lambda d1, d2: d1 | d2, [{antenna_type: sum([[(ri, ci) for ci in range(len(input_value[ri])) if input_value[ri][ci] == antenna_type] for ri in range(len(input_value))], [])} for antenna_type in set("".join(input_value)) - set(".")])[antenna_type] if not positionA == positionB and 0 <= positionA[0] + (positionA[0]-positionB[0]) < len(input_value) and 0 <= positionA[1] + (positionA[1]-positionB[1]) < len(input_value[0]) ] for positionA in reduce(lambda d1, d2: d1 | d2, [{antenna_type: sum([[(ri, ci) for ci in range(len(input_value[ri])) if input_value[ri][ci] == antenna_type] for ri in range(len(input_value))], [])} for antenna_type in set("".join(input_value)) - set(".")])[antenna_type]], []) for antenna_type in reduce(lambda d1, d2: d1 | d2, [{antenna_type: sum([[(ri, ci) for ci in range(len(input_value[ri])) if input_value[ri][ci] == antenna_type] for ri in range(len(input_value))], [])} for antenna_type in set("".join(input_value)) - set(".")])], [])))

    def solvePart2(self, input_value: list[str]) -> int:
        return len(set(sum([sum([sum([[(positionA[0] + factor*(positionA[0]-positionB[0]), positionA[1] + factor*(positionA[1]-positionB[1])) for factor in range(0,max(len(input_value), len(input_value[0]))) if 0 <= positionA[0] + factor*(positionA[0]-positionB[0]) < len(input_value) and 0 <= positionA[1] + factor*(positionA[1]-positionB[1]) < len(input_value[0])] for positionB in reduce(lambda d1, d2: d1 | d2, [{antenna_type: sum([[(ri, ci) for ci in range(len(input_value[ri])) if input_value[ri][ci] == antenna_type] for ri in range(len(input_value))], [])} for antenna_type in set("".join(input_value)) - set(".")])[antenna_type] if not positionA == positionB], []) for positionA in reduce(lambda d1, d2: d1 | d2, [{antenna_type: sum([[(ri, ci) for ci in range(len(input_value[ri])) if input_value[ri][ci] == antenna_type] for ri in range(len(input_value))], [])} for antenna_type in set("".join(input_value)) - set(".")])[antenna_type]], []) for antenna_type in reduce(lambda d1, d2: d1 | d2, [{antenna_type: sum([[(ri, ci) for ci in range(len(input_value[ri])) if input_value[ri][ci] == antenna_type] for ri in range(len(input_value))], [])} for antenna_type in set("".join(input_value)) - set(".")])], [])))
