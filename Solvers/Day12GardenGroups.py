from functools import reduce
from itertools import pairwise



class Day12GardenGroups:
    def solvePart1(self, input_value: list[str]) -> int:
        return (lambda coordinates, regions: sum([(lambda region: region["Area"] * (4 * region["Area"] - region["Neighbours"]))(regions[r]) for r in regions]) if [(get_neighbour := lambda id, coord, coordinates, regions, coordinates_immutable : (lambda v: [get_neighbour(id, coord2, coordinates, regions, coordinates_immutable) if coord2 in coordinates_immutable and coordinates_immutable[coord2] == v and not regions.update({id: {"Area": regions[id]["Area"], "Neighbours": regions[id]["Neighbours"] + 1}}) else None for coord2 in [(coord[0] + dr, coord[1] + dc) for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]]])(coordinates.pop(coord)) if coord in coordinates and regions.setdefault(id, {"Area": 0, "Neighbours": 0}) and not regions.update({id: {"Area": regions[id]["Area"] + 1, "Neighbours": regions[id]["Neighbours"]}}) else None)(id, coord, coordinates, regions, coordinates.copy()) for id, coord in enumerate(list(coordinates.keys()))] or True else None)(reduce(lambda d1, d2: d1 | d2, [{(ri, ci): input_value[ri][ci] for ci in range(len(input_value[ri]))} for ri in range(len(input_value))]), dict())

    def solvePart2(self, input_value: list[str]) -> int:
        return sum((lambda coordinates, regions : (lambda visited, coordinates_immutable, regions: ([(lambda region: (region["Area"] * (region["LatticePoints"])))(regions[r]) for r in regions]) if [(get_neighbour := lambda id, coord, visited, regions, coordinates_immutable : (lambda v: [get_neighbour(id, coord2, visited, regions, coordinates_immutable) if coord2 in visited and coordinates_immutable[coord2] == v else None for coord2 in [(coord[0] + dr, coord[1] + dc) for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]]])(coordinates_immutable[coord]) if coord in visited and not visited.remove(coord) and regions.setdefault(id, {"Area": 0, "LatticePoints": 0}) and not regions.update({id: {"Area": regions[id]["Area"], "LatticePoints": regions[id]["LatticePoints"] + len([True for c1, c2, c3 in [((coord[0] + dr1, coord[1] + dc1), (coord[0] + dr2, coord[1] + dc2), (coord[0] + dr1 + dr2, coord[1] + dc1 + dc2)) for (dr1, dc1), (dr2, dc2) in pairwise([(-1, 0), (0, -1), (1, 0), (0, 1), (-1, 0)])] if not ((c1 in coordinates_immutable and coordinates_immutable[coord] == coordinates_immutable[c1]) or (c2 in coordinates_immutable and coordinates_immutable[coord] == coordinates_immutable[c2]) and not (c3 in coordinates_immutable and coordinates_immutable[coord] == coordinates_immutable[c3])) ])}}) and not regions.update({id: {"Area": regions[id]["Area"] + 1, "LatticePoints": regions[id]["LatticePoints"]}}) else None)(id, coord, visited, regions, coordinates_immutable) for id, coord in enumerate(list(coordinates.keys()))] or True else None)(set(coordinates.keys()), coordinates, regions))(reduce(lambda d1, d2: d1 | d2, [{(ri, ci): input_value[ri][ci] for ci in range(len(input_value[ri]))} for ri in range(len(input_value))]), dict()))
