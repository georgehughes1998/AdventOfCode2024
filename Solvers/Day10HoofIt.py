

from functools import reduce


class Day10HoofIt:
    def solvePart1(self, input_value: list[str]) -> int:
        return (lambda topographic_map: sum([len((count_trailends := lambda trailhead, trailends, graph: {trailhead} if trailhead in trailends else reduce(set.union, [count_trailends(new_trailhead, trailends, graph) for new_trailhead in graph[trailhead]]) if trailhead in graph else set())(trailhead, sum([[(ri, ci) for ci in range(len(topographic_map[ri])) if topographic_map[ri][ci] == 9] for ri in range(len(topographic_map))], []), (lambda topographic_map, coords_list: (lambda d: {i: d[i] for i in d if d[i]})({c1: {c2 for c2 in [(c1[0]+rd, c1[1]+cd) for (rd, cd) in [(-1, 0), (1, 0), (0, -1), (0, 1)]] if 0 <= c2[0] < len(topographic_map) and 0 <= c2[1] < len(topographic_map[0]) and topographic_map[c1[0]][c1[1]] == topographic_map[c2[0]][c2[1]] - 1 } for c1 in coords_list}))(topographic_map, sum([[(ri, ci) for ci in range(len(topographic_map[ri]))] for ri in range(len(topographic_map))], [])))) for trailhead in sum([[(ri, ci) for ci in range(len(topographic_map[ri])) if topographic_map[ri][ci] == 0] for ri in range(len(topographic_map))], [])]))([[-10 if v == "." else int(v) for v in row] for row in input_value])

    def solvePart2(self, input_value: list[str]) -> int:
        return (lambda topographic_map: sum([((count_trailends := lambda trailhead, trailends, graph: 1 if trailhead in trailends else sum([count_trailends(new_trailhead, trailends, graph) for new_trailhead in graph[trailhead]]) if trailhead in graph else 0)(trailhead, sum([[(ri, ci) for ci in range(len(topographic_map[ri])) if topographic_map[ri][ci] == 9] for ri in range(len(topographic_map))], []), (lambda topographic_map, coords_list: (lambda d: {i: d[i] for i in d if d[i]})({c1: {c2 for c2 in [(c1[0]+rd, c1[1]+cd) for (rd, cd) in [(-1, 0), (1, 0), (0, -1), (0, 1)]] if 0 <= c2[0] < len(topographic_map) and 0 <= c2[1] < len(topographic_map[0]) and topographic_map[c1[0]][c1[1]] == topographic_map[c2[0]][c2[1]] - 1 } for c1 in coords_list}))(topographic_map, sum([[(ri, ci) for ci in range(len(topographic_map[ri]))] for ri in range(len(topographic_map))], [])))) for trailhead in sum([[(ri, ci) for ci in range(len(topographic_map[ri])) if topographic_map[ri][ci] == 0] for ri in range(len(topographic_map))], [])]))([[-10 if v == "." else int(v) for v in row] for row in input_value])
